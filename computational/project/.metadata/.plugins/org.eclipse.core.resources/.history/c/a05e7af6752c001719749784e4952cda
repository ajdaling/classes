'''
Created on Apr 28, 2017

@author: aj
'''

from numpy import e, linspace, zeros, arange
from matplotlib import animation as anim, pyplot as pp, cm
from matplotlib.widgets import Slider, Button, RadioButtons
import mpl_toolkits.mplot3d.axes3d as p3


l = 10
x_min = 0
x_max = l  
y_min = 0
y_max = l
max_temp = 10.

num_points = l #number of x points
#initialize 1d array of points
x,dx = linspace(x_min,x_max,num_points,retstep = True)
t0 = 0
r = 0.4	#must be <0.5 for stability for FD
dt = r*(dx**2)
t_max = 200
time = t0

u = zeros(num_points) #u(x,t)
u_1 = zeros(num_points) #u(x,t-1)

for i in range(x_min,x_max+1):
	u_1[i] = i

#plot vars
fig = pp.figure()
#ax = fig.add_subplot(1,2,1,projection='3d')
ax = p3.Axes3D(fig)
ax.set_title('Finite Difference 2-D Heat Simulation')
ax.set_xlim3d([x_min,x_max])
ax.set_xlabel('x')
ax.set_ylim3d([y_min,y_max])
ax.set_ylabel('y')
ax.set_zlim3d([0.,max_temp])
ax.set_zlabel('u(x,y)')

X = arange(x_min,x_max,1.)
Y = arange(y_min,y_max,1.)
X,Y = numpy.meshgrid(X,Y)
R = mumpy.sqrt(X**2+Y**2)
Z = 

pp.subplots_adjust(left = 0.25, bottom = 0.25)
axes = pp.axes(xlim=(x_min,x_max), ylim=(0,9))
axes.set_title("Finite Difference 1-D Heat Simulation")
axes.set_xlabel("x")
axes.set_ylabel("u(x,t)")
line, = axes.plot([],[],lw=5)
t_label = axes.text(0,1,'',transform=axes.transAxes)


ax_bc_xmin = pp.axes([0.25,0.1,0.65,0.03])
ax_bc_xmax = pp.axes([0.25,0.15,0.65,0.03])
bc_xmin = 0.
bc_xmax = 0.
bc_xmin_slider = Slider(ax_bc_xmin, 'Left Boundary Condition', 0.,10.,valinit=0.)
bc_xmax_slider = Slider(ax_bc_xmax, 'Right Boundary Condition', 0.,10.,valinit=0.)


def init():
	t_label.set_text('')
	line.set_data([],[])
	return line, t_label

def update(garbage):

	global time, u, u_1, bc_xmin, bc_xmax
	bc_xmin = bc_xmin_slider.val
	bc_xmax = bc_xmax_slider.val
	time += dt
	time_step(u,u_1,x_min,x_max)
	t_label.set_text('time = %.3f' % time)
	line.set_data(x,u)
	return line, t_label


#initialize initial conditions
def time_step(u,u_1,x_min,x_max):
		for i in range(1,x_max):
			u[i] = u_1[i]+r*(u_1[i-1] - 2*u_1[i] + u_1[i+1])
		print(u)
		u[x_min] = bc_xmin
		u[x_max] = bc_xmax
		u_1[:] = u


anm = anim.FuncAnimation(fig, update , frames = int(t_max/dt), interval = 10, init_func = init, blit = True, repeat = False)
pp.show()


