'''
Created on Apr 30, 2017

@author: aj
'''
from numpy import e, linspace, zeros, arange, meshgrid, resize, mgrid, transpose
from sliders import sliders
from scipy.sparse import diags, spdiags
# from scipy.sparse.linalg import *
from scipy.sparse.linalg import spsolve
class heat_model(object):
	'''
	classdocs
	'''


	def __init__(self, bounds , id, fig, **key_params):
		'''
		Constructor
		'''
		print(key_params)
		#initialize dimension params
		self.bounds = bounds
		self.dimensions = len(bounds)/2
		self.is2d = False
		if(self.dimensions==2):
			self.is2d = True
		self.x_min = bounds[0]
		self.x_max = bounds[1]
		self.lx = self.x_max-self.x_min
		if self.is2d:
			self.y_min = bounds[2]
			self.y_max = bounds[3]
			self.ly = self.y_max - self.y_min
		
		self.is_sparse = False
		#check if sparse
		if 'sparse' in key_params:
			self.is_sparse = key_params['sparse']
	
		
		#create necessary members
		self.x, self.dx = linspace(self.x_min,self.x_max,self.lx+1,retstep = True)
		
		if(self.is2d):
			self.y, self.dy = linspace(self.y_min,self.y_max,self.ly+1,retstep = True)
			self.X, self.Y = meshgrid(self.x,self.y)
			self.X = transpose(self.X)
			self.Y = transpose(self.Y)
		#create mu and dt
		self.t_max = 2000
		if not self.is2d:
			self.r = 0.5
			self.dt = self.r * self.dx ** 2
		else:
			self.r = 0.25
			self.dt = self.r * self.dx * self.dy
		
		#creat u(x,t) or u(x,y,t)
		if not self.is2d:
			self.u = zeros(self.lx+1)
			self.u_1 = zeros(self.lx+1)
			for i in range(1,self.lx):
				self.u[i] = self.u_1[i] = 5.
		else:
			self.u = zeros((self.lx+1,self.ly+1))
			self.u_1 = zeros((self.lx+1,self.ly+1))
			for i in range(1,self.lx):
				for j in range(1,self.ly):
					self.u[i,j] = self.u_1[i,j] = float(i+j)/2.
			self.bc_xmin = self.bc_xmax = self.bc_ymin = self.bc_ymax = 0.
		
		#create sliders
		if id == 1:
			self.sliderx = 0.01
		elif id == 2:
			self.sliderx = 0.5
		self.sliders = sliders(fig,self,self.sliderx)
		
	def time_step(self, steps_per_second):
		#update u
		if not self.is2d and not self.is_sparse:
			for step in range(int(steps_per_second)):
				for i in range(1,self.lx):
					self.u[i] = self.u_1[i] + self.r *(self.u_1[i-1] - 2.*self.u_1[i] + self.u_1[i+1])
				self.u_1 = self.u
		elif not self.is2d and self.is_sparse:
			#self.b = self.u_1
			#self.u[:] = spsolve(self.tridiag,self.b)
			#self.u_1[:] = self.u
			#print(self.u)
			self.time_step_sparse()
			print(self.u)
		elif self.is2d and not self.is_sparse:
			for step in range(int(steps_per_second)+1):
				for i in range(1,self.lx):
					for j in range(1,self.ly):
						self.u[i,j] =  self.u_1[i,j]+self.r*( self.u_1[i,j-1] + self.u_1[i-1,j] - 4*self.u_1[i,j] + self.u_1[i+1,j] + self.u_1[i,j+1] )
				self.u_1 = self.u
	
	def update_bc(self):
		if not self.is2d:
			self.u[self.x_min] = self.u_1[self.x_min] = self.bc_xmin
			self.u[self.x_max] = self.u_1[self.x_max] = self.bc_xmax
			self.tridiag = get_tridiagonal_1d(self.x_max, self.r)
		else:
			print("shape" + str(self.u.shape))
			print("lx " + str(self.lx) + " ly " + str(self.ly))
			for i in range(self.ly+1):
				self.u[self.x_min,i] = self.bc_xmin
				self.u_1[self.x_min,i] = self.bc_xmin
				self.u[self.x_max,i] = self.bc_xmax
				self.u_1[self.x_max,i] = self.bc_xmax
			for i in range(self.lx+1):
				self.u[i,self.y_min] = self.bc_ymin
				self.u_1[i,self.y_min] = self.bc_ymin
				self.u[i,self.y_max] = self.bc_ymax
				self.u_1[i,self.y_max] = self.bc_ymax
	
	def time_step_sparse(self):
		tridiag = self.get_tridiagonal_1d()
		b = self.u_1
		#self.u_1[self.x_min] = self.bc_xmin
		#self.u_1[self.x_max] = self.bc_xmax
		self.u[:] = spsolve(tridiag, b)
		self.u_1[:] = self.u
		
	def get_tridiagonal_1d(self):
		
	# 	main_diag = -2.*r*ones(dim+1)
	# 	off_diag1 = off_diag2 = r*ones(dim+1)
	# 	tridiag = diags(diagonals = [main_diag, off_diag1, off_diag2], offsets = [0,-1,1], shape = (dim+1, dim+1), format = 'csr')
	# 	#data = array([main_diag,off_diag,off_diag])
	# 	#tridiag = spdiags(data,[0,-1,1],dim,dim)
	# 	print(tridiag)
	# 	return(tridiag)
		Nx = self.lx
		main  = zeros(Nx+1)
		lower = zeros(Nx+1)
		upper = zeros(Nx+1)
		F = self.r
		main[:] = 2
		lower[:] = -1  #1
		upper[:] = -1  #1
		main[0] = 1
		main[Nx] = 1
		#A = spdiags([main,lower,upper],[0,-1,1],Nx,Nx)
		A = diags(diagonals=[main, lower, upper],offsets=[0, -1, 1], shape=(Nx+1, Nx+1),format='csr')
		return(A)
		
	
	def resize(self):
		#reset dimensions
		if not self.is2d:
			self.bounds = [self.x_min,self.x_max]
			self.lx = self.x_max - self.x_min
			self.x, self.dx = linspace(self.x_min,self.x_max,self.lx+1,retstep = True)
			self.dt = self.r * self.dx ** 2
			self.u = resize(self.u,(self.lx+1))
			self.u_1 = resize(self.u_1,(self.lx+1))
		else:
			self.bounds = [self.x_min,self.x_max,self.y_min,self.y_max]
			self.lx = self.x_max - self.x_min
			self.ly = self.y_max - self.y_min
			self.x, self.dx = linspace(self.x_min,self.x_max,self.lx+1,retstep = True)
			self.y, self.dy = linspace(self.y_min,self.y_max,self.ly+1,retstep = True)
			self.X, self.Y = meshgrid(self.x,self.y)
			self.X = transpose(self.X)
			self.Y = transpose(self.Y)
			
			self.u = resize(self.u,(self.x_max+1, self.y_max+1))
			self.u_1 = resize(self.u_1,(self.x_max+1, self.y_max+1))
