/*
 * UI.cpp
 *
 *  Created on: Apr 10, 2017
 *      Author: aj
 */

#include "UI.h"
#include "Game.h"
#include "UserDB.h"
#include <stdlib.h>
#include <string>
#include <iostream>
#include <map>
#include <utility>
#include <iterator>
using namespace std;
namespace caps {

UI::UI() {
	userDB = new UserDB();
	game = new Game();
}

UI::~UI() {
	// TODO Auto-generated destructor stub
}

void UI::welcome(){
	cout << "Hello" << endl;
	mainMenu();
}

void UI::mainMenu(){
	cout << "Select an Option:" << endl;
	cout << "(1) - Add New User" << endl;
	cout << "(2) - Continue as Existing User" << endl;
	cout << "(3) - View Saved Users" << endl;
	cout << "(4) - Exit" << endl;
	bool done = false;

	string s_response, error;
	int response;
	//cout << "Enter a new value: "; // I don't like doing this.
	do { cout << "Enter a number: " << flush;
	 getline(cin,s_response);
	 for(unsigned int i = 0; i<s_response.length(); i++) if(isalpha(str[i])) error = "true"; else error = "false";
	} while(error == "true");
	Value = atoi(str.c_str());
	cout << "The value has been set to: " << Value;


	while(!done){
		int response = 4;
		cin.ignore();
		cin.sync();
		cin.clear();
		cin >> response;
		cout << "user responded: " << response << endl;
		cin.ignore();
		switch(response){
		case 1:
			addUser();
			startGame();
			done = true;
			break;
		case 2:
			continueAsUser();
			startGame();
			done = true;
			break;
		case 3:
			userDB->displayAllUsers();
			mainMenu();
			done = true;
			break;
		case 4:
			exitGame();
			done = true;
			break;
		default:
			cout << "Invalid Response: Please Enter a valid number." << endl;
		}
	}
}

void UI::addUser(){
	string username;
	cout << "Enter Username: ";
	getline(cin,username);
	cout << "Welcome. Your username is: " << username << endl;
	game->setUser(userDB->addUser(username));
}

void UI::continueAsUser(){
	cout << "Saved users:" << endl;
	userDB->displayUserNames();
	string username;
	bool found = false;
	while(!found){
		cout << "Enter Username or enter \"main\" to return to main menu:";
		getline(cin,username);
		if(username.compare("main")==0){
			found = true;
			mainMenu();
		} else {
			if(userDB->hasUser(username)){
				found = true;
				game->setUser(userDB->getUser(username));
			} else{
				cout << "Username not found.";
			}
		}
	}
}

void UI::startGame(){
	int round_score = game->startGame();
	afterRoundMenu(round_score);
}

void UI::afterRoundMenu(int this_round_score){
	//offer to save score
	cout << "Good Job. You earned " << this_round_score << " points. Save score? (y/n):";
	string save_score;
	getline(cin,save_score);
	if(save_score.compare("y")==0){
		cout << "saving score." << endl;
		userDB->saveUserScore(game->getUserName(),this_round_score);
	} else if(save_score.compare("n")==0){
		cout << "Score not saved." << endl;
	}


	bool done = false;
	while(!done){
		cout << "Choose from the following options." << endl;
		cout << "(1) - Try again." << endl;
		cout << "(2) - Exit. " << endl;
		cout << "(3) - Return to main menu." << endl;
		int response;
		cin >> response;
		cin.ignore(); //gets rid of \n in buffer
		switch(response){
		case 1:
			startGame();
			done = true;
			break;
		case 2:
			exitGame();
			done = true;
			break;
		case 3:
			mainMenu();
			done = true;
			break;
		default:
			cout << "Invalid input. Please enter a valid number." << endl;
			break;
		}
	}
}

void UI::exitGame(){
	cout << "Writing data to file.";
	userDB->writeUserData();
}
} /* namespace caps */
