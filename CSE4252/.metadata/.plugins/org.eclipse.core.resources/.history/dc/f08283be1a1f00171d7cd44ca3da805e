/*
 * UI.cpp
 *
 *  Created on: Apr 10, 2017
 *      Author: aj
 */

#include "UI.h"
#include "Game.h"
#include "UserDB.h"
#include <iostream>
#include <map>
#include <utility>
#include <iterator>
using namespace std;
namespace caps {

UI::UI() {
	userDB = new UserDB();
	game = new Game();
}

UI::~UI() {
	// TODO Auto-generated destructor stub
}

void UI::welcome(){
	cout << "Hello" << endl;
	mainMenu();
}

void UI::mainMenu(){
	int response;
	cout << "Select an Option:" << endl;
	cout << "(1) - Add New User" << endl;
	cout << "(2) - Continue as Existing User" << endl;
	cout << "(3) - View Saved Users" << endl;
	cout << "(4) - Exit" << endl;
	cin >> response;
	cin.ignore();
	switch(response){
	case 1:
		addUser();
		startGame();
		break;
	case 2:
		continueAsUser();
		startGame();
		break;
	case 3:
		userDB->displayAllUsers();
		mainMenu();
		break;
	case 4:
		exitGame();
		break;
	default:
		cout << "Invalid Response: Please Enter a valid number." << endl;
		mainMenu();
	}
}

User* UI::addUser(){
	string username;
	cout << "Enter Username: ";
	getline(cin,username);
	cout << "Welcome. Your username is: " << username << endl;
	User* usr = userDB->addUser(username);
}

void UI::continueAsUser(){
	cout << "Saved users:" << endl;
	userDB->displayUserNames();
	string username;
	bool found = false;
	while(!found){
		cout << "Enter Username or enter \"main\" to return to main menu:";
		getline(cin,username);
		if(username.compare("main")==0){
			mainMenu();
		}
		else if(userDB->all_users.find(username) == userDB->all_users.end()){
			//username not in map
			cout << "Username not found. Try again or enter \"main\" to return to main menu." << endl;
		} else{
			//username found
			game->user = userDB->all_users[username];
			found = true;
		}
	}



}

void UI::startGame(){
	int round_score = game->startGame();
	afterRoundMenu(round_score);
}

void UI::afterRoundMenu(int this_round_score){
	//offer to save score
	cout << "Good Job. You earned " << this_round_score << " points. Save score? (y/n):";
	string save_score;
	getline(cin,save_score);
	if(save_score.compare("y")==0){
		cout << "saving score." << endl;
		userDB->saveUserScore(game->user->getName(),this_round_score);
	} else if(save_score.compare("n")==0){
		cout << "Score not saved." << endl;
	}


	bool done = false;
	while(!done){
		cout << "Choose from the following options." << endl;
		cout << "(1) - Try again." << endl;
		cout << "(2) - Exit. " << endl;
		cout << "(3) - Return to main menu." << endl;
		int response;
		cin >> response;
		cin.ignore(); //gets rid of \n in buffer
		switch(response){
		case 1:
			startGame();
			done = true;
			break;
		case 2:
			exitGame();
			done = true;
			break;
		case 3:
			mainMenu();
			done = true;
			break;
		default:
			cout << "Invalid input. Please enter a valid number." << endl;
			break;
		}
	}
}

void UI::exitGame(){
	cout << "Writing data to file.";
	userDB->writeUserData();
}
} /* namespace caps */
